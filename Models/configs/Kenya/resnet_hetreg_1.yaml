#where to save checkpoints

save_path: "HetReg_Kenya_1"

# load existing checkpoint for inference. If passing experiment folder instead (for multiple seeds), it will evaluate all of them.
load_ckpt_path: "HetReg_Kenya_2"

save_preds_path: "predictions_hetreg_1"
log_comet: false

overfit_batches: 0.0
# maximum number of epochs to train for
max_epochs: 50
# base directory
base_dir:
#use geographical information
loc:
  use: False
  #if True :concatenate location features with satellite image features, else location features are mappe to same imension as satellite features and the features are multiplie
  loc_type: "latlon"   #latlon or state
  concat: True

comet:
  project_name: "camera_ready_neurips_baselines" 
  tags: ["experiments", "resnet18", "RGBNIR_ENV_RM"]
  experiment_name: "experiments" # specify for training, or use to report test results, TODO: also use to resume training

  experiment_key: "" # use to report test results,

experiment:
  #TASK and name should always be ebird_classifier --> maybe remove it
  task: "ebird_classifier"
  name: "ebird_classifier"
  seed: 877
  module:
    #choose model : "resnet18" "satmae" or "satlas"
    model: "resnet18"
    
    #use pretrained weights ( torchvision )
    pretrained: True
    # resume training from another model (transfer learning), set empty if training from scratch
    initialize_USA: False
    resume: ""
    #initializes biases of the output layer sothat sigmoid(bias) = mean over the training set for each species

    freeze: False

    init_bias: ""
    means_path: ""
    lr: 0.0001

optimizer: "Adam"  #"Adam"

losses:
#scale attribute is just for plotting if the values are very small
  criterion: "CE" #or MAE or MSE or Focal or RMSLE  (loss to choose for optim )

#auto lr will only work if there is only one optimizer
auto_lr_find: False
scheduler:
  name: "ReduceLROnPlateau" #"" for no schuler, "ReduceLROnPlateau" #"ReduceLROnPlateau" or "StepLR" "WarmUp"
  reduce_lr_plateau:
    factor: 0.5
    lr_schedule_patience: 20
  step_lr:
    step_size: 100
    gamma: 0.5
  warmup:
    warmup_epochs: 5
    max_epochs: 100

  cyclical:
    warmup_epochs: 10

variables: &default_vars
    ped_means: &ped_means []
    ped_std: &ped_std []
    bioclim_means: &bioclim_means []
    bioclim_std: &bioclim_std []

    rgbnir_means: &rgbnir_means []
    rgbnir_std: &rgbnir_std []

    visual_means: &visual_means []
    visual_stds: &visual_stds []

data:
  loaders:
    num_workers: 8
    batch_size: 128
  #What kind of satellite input ? "refl" for "raw" reflectance values or
  #"img" for 0-255 values (only supported for "rgb" and "nir" bands)
  datatype: "refl"
  multiscale : [64]

  bands: ["r","g","b", "nir"]  #any subset of ["r", "g", "b", "nir"] if working with "refl" data or ["rgb", "nir"] if using "img"

  res: 10 #resolution of the images

  #o you want to use environmental data (pedological and bioclimatic (low res) data) #ped" or "bioclim" or both or empty list
  env: ["bioclim"]
  env_var_sizes: [19]

  #resolution of pedological and bioclimatic data in meters
  ped:
      #pedological rasters
      res: 250
  bioclim:
      #bioclim
      res: 1000

  files:
    base: "new_kenya2"
    train: "train_filtered.csv"
    val: "valid_filtered.csv"
    test: "test_filtered.csv"

    targets_folder: "Concat_JSON_April5"
    env_data_folder: "environmental"
    images_folder: "images"
    correction_thresh: "" # range maps - threshold = False

    rgbnir_means: "stats/means_rgbnir.npy"
    rgbnir_stds: "stats/stds_rgbnir.npy"

    rgb_means: "stats/means_images_visual.npy"
    rgb_stds: "stats/stds_images_visual.npy"

    env_means: "stats/env_means.npy"
    env_stds: "stats/env_stds.npy"

  correction_factor:
     thresh: # to train with RM

  target:
    type: "probs"  #binary for classification targets  or "probs" for regression (default should be "probs")

    # choose subset of birds : "ducks" for trying on species [37] or [2] for cooper's hawk (non passerine) "songbirds" (307 species) or None (full set 684 species) "not_songbirds"
    subset:

  #normalization: None
  transforms:
    - name: matchres
      ignore: false
      subset: ["bioclim"]
      target_size: [64, 64]
      custom_means: [*bioclim_means]

    - name: crop
      ignore: false
      p: 1
      ignore_band: ["bioclim", "ped"] #["bioclim", "ped"]
      center: true # disable randomness, crop around the image's center
      height: 64
      width: 64
    - name: hflip
      ignore: "val"
      p: 0.5
    - name: vflip
      ignore: "val"
      p: 0.5
    - name: normalize
      normalize_by_255: False
      ignore: False
      maxchan: false
      subset: ["sat"]
      custom: [*rgbnir_means, *rgbnir_std]

    - name: normalize
      ignore: False
      maxchan: false
      normalize_by_255: False
      subset: ["bioclim"]
      custom: [*bioclim_means, *bioclim_std]
    - name: normalize
      ignore: True
      maxchan: false
      normalize_by_255: False
      subset: ["ped"]
      custom: [*ped_means, *ped_std]
    - name: randomnoise
      ignore: "val"
      std: 0.01
      max_noise: 0.05
      p: 0.35

    - name: blur
      ignore: "val"
      p: 0.5
      val: 0.1

    - name: rotate
      ignore: "val"
      p: 0.5
      val: 15

    - name: randomcontrast
      ignore: "val"
      p: 0.35
      val: 2

    - name: randombrightness
      ignore: "val"
      p: 0.3
      val: 2

  total_species: 1054
trainer:
  auto_scale_batch_size: False
